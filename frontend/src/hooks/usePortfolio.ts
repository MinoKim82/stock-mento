import { useState, useCallback, useEffect } from 'react';
import { api } from '../api/client';
import type { 
  SessionInfo, 
  PortfolioSummary, 
  PortfolioPerformance, 
  PortfolioRisk, 
  CacheInfo,
  TransactionList,
  AccountsDetailed,
  YearlyReturnsDetail
} from '../types';

export const usePortfolio = () => {
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [sessionInfo, setSessionInfo] = useState<SessionInfo | null>(null);
  const [portfolioSummary, setPortfolioSummary] = useState<PortfolioSummary | null>(null);
  const [portfolioPerformance, setPortfolioPerformance] = useState<PortfolioPerformance | null>(null);
  const [portfolioRisk, setPortfolioRisk] = useState<PortfolioRisk | null>(null);
  const [cacheInfo, setCacheInfo] = useState<CacheInfo | null>(null);
  const [transactionList, setTransactionList] = useState<TransactionList | null>(null);
  const [accountsDetailed, setAccountsDetailed] = useState<AccountsDetailed | null>(null);
  const [yearlyReturns, setYearlyReturns] = useState<YearlyReturnsDetail[] | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [initialCheckDone, setInitialCheckDone] = useState(false);

  const uploadCsv = useCallback(async (file: File) => {
    setIsLoading(true);
    setError(null);
    
    try {
      const response = await api.uploadCsv(file);
      
      // Î∞±ÏóîÎìúÍ∞Ä Îã®Ïùº ÌååÏÑúÎ•º ÏÇ¨Ïö©ÌïòÎØÄÎ°ú ÎçîÎØ∏ ÏÑ∏ÏÖò ID ÏÉùÏÑ±
      const dummySessionId = 'current';
      setSessionId(dummySessionId);
      setSessionInfo({
        session_id: dummySessionId,
        message: response.message || 'CSV ÌååÏùºÏù¥ ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§.',
        cache_size: 0,
        total_sessions: 1
      });
      
      // üöÄ ÌååÏã±Îêú JSON Îç∞Ïù¥ÌÑ∞Î•º Ìïú Î≤àÏóê Î°úÎìú
      const parsedData = await api.getParsedData();
      
      // Î™®Îì† Îç∞Ïù¥ÌÑ∞ Ï¶âÏãú ÏÑ§Ï†ï
      if (parsedData.portfolio_summary) {
        setPortfolioSummary(parsedData.portfolio_summary);
      }
      if (parsedData.portfolio_performance) {
        setPortfolioPerformance(parsedData.portfolio_performance);
      }
      if (parsedData.portfolio_risk) {
        setPortfolioRisk(parsedData.portfolio_risk);
      }
      if (parsedData.accounts_detailed) {
        setAccountsDetailed(parsedData.accounts_detailed);
      }
      if (parsedData.yearly_returns) {
        setYearlyReturns(parsedData.yearly_returns);
      }
      
      // Í±∞Îûò ÎÇ¥Ïó≠ÏùÄ Ï°∞Í∏à ÎÇòÏ§ëÏóê Î°úÎìú
      setTimeout(() => {
        api.getAllTransactions(dummySessionId)
          .then(transactions => setTransactionList(transactions))
          .catch(err => console.error('Í±∞Îûò ÎÇ¥Ïó≠ Î°úÎìú Ïã§Ìå®:', err));
      }, 100);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'CSV ÏóÖÎ°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      throw err;
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Ïï± ÏãúÏûë Ïãú Í∏∞Ï°¥ CSV ÌååÏùºÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
  useEffect(() => {
    if (!initialCheckDone) {
      const checkExistingData = async () => {
        try {
          // Î®ºÏ†Ä Ï∫êÏãú Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÏó¨ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäîÏßÄ Ï≤¥ÌÅ¨
          const cacheInfo = await api.getCacheInfo();
          
          if (cacheInfo.has_data && cacheInfo.has_parsed_data) {
            const dummySessionId = 'current';
            
            // Ï¶âÏãú ÏÑ∏ÏÖò ÏÑ§Ï†ï (ÌôîÎ©¥ Ï†ÑÌôò)
            setSessionId(dummySessionId);
            setSessionInfo({
              session_id: dummySessionId,
              message: 'Í∏∞Ï°¥ CSV ÌååÏùºÏù¥ Î°úÎìúÎêòÏóàÏäµÎãàÎã§.',
              cache_size: cacheInfo.total_cache_size,
              total_sessions: 1
            });
            
            // Ï¥àÍ∏∞ Ï≤¥ÌÅ¨ ÏôÑÎ£å ÌëúÏãú (ÌôîÎ©¥ Ï†ÑÌôò Ìä∏Î¶¨Í±∞)
            setInitialCheckDone(true);
            
            // üöÄ ÌååÏã±Îêú JSON Îç∞Ïù¥ÌÑ∞Î•º Ìïú Î≤àÏóê Î°úÎìú
            const parsedData = await api.getParsedData();
            
            // Î™®Îì† Îç∞Ïù¥ÌÑ∞ Ï¶âÏãú ÏÑ§Ï†ï
            if (parsedData.portfolio_summary) {
              setPortfolioSummary(parsedData.portfolio_summary);
            }
            if (parsedData.portfolio_performance) {
              setPortfolioPerformance(parsedData.portfolio_performance);
            }
            if (parsedData.portfolio_risk) {
              setPortfolioRisk(parsedData.portfolio_risk);
            }
            if (parsedData.accounts_detailed) {
              setAccountsDetailed(parsedData.accounts_detailed);
            }
            if (parsedData.yearly_returns) {
              setYearlyReturns(parsedData.yearly_returns);
            }
            
            // Í±∞Îûò ÎÇ¥Ïó≠ÏùÄ Ï°∞Í∏à ÎÇòÏ§ëÏóê Î°úÎìú (Îçú Ï§ëÏöî)
            setTimeout(() => {
              api.getAllTransactions(dummySessionId)
                .then(transactions => setTransactionList(transactions))
                .catch(err => console.error('Í±∞Îûò ÎÇ¥Ïó≠ Î°úÎìú Ïã§Ìå®:', err));
            }, 100);
          } else {
            setInitialCheckDone(true);
          }
        } catch (err) {
          // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå - ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏóÖÎ°úÎìú ÎåÄÍ∏∞
          console.log('No existing CSV file found. Please upload a CSV file.');
          setInitialCheckDone(true);
        }
      };
      
      checkExistingData();
    }
  }, [initialCheckDone]);

  const loadCacheInfo = useCallback(async () => {
    try {
      const info = await api.getCacheInfo();
      setCacheInfo(info);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Ï∫êÏãú Ï†ïÎ≥¥ Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  }, []);

  const clearCache = useCallback(async (targetSessionId?: string) => {
    try {
      await api.clearCache(targetSessionId);
      
      if (targetSessionId === sessionId || !targetSessionId) {
        // ÌòÑÏû¨ ÏÑ∏ÏÖòÏùò Ï∫êÏãúÎ•º ÏÇ≠Ï†úÌïú Í≤ΩÏö∞ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
        setSessionId(null);
        setSessionInfo(null);
        setPortfolioSummary(null);
        setPortfolioPerformance(null);
        setPortfolioRisk(null);
      }
      
      // Ï∫êÏãú Ï†ïÎ≥¥ ÏÉàÎ°úÍ≥†Ïπ®
      await loadCacheInfo();
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Ï∫êÏãú ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  }, [sessionId, loadCacheInfo]);

  const refreshData = useCallback(async () => {
    if (sessionId) {
      try {
        const parsedData = await api.getParsedData();
        
        if (parsedData.portfolio_summary) setPortfolioSummary(parsedData.portfolio_summary);
        if (parsedData.portfolio_performance) setPortfolioPerformance(parsedData.portfolio_performance);
        if (parsedData.portfolio_risk) setPortfolioRisk(parsedData.portfolio_risk);
        if (parsedData.accounts_detailed) setAccountsDetailed(parsedData.accounts_detailed);
        if (parsedData.yearly_returns) setYearlyReturns(parsedData.yearly_returns);
        
        setTimeout(() => {
          api.getAllTransactions(sessionId)
            .then(transactions => setTransactionList(transactions))
            .catch(err => console.error('Í±∞Îûò ÎÇ¥Ïó≠ Î°úÎìú Ïã§Ìå®:', err));
        }, 100);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      }
    }
  }, [sessionId]);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  return {
    // ÏÉÅÌÉú
    sessionId,
    sessionInfo,
    portfolioSummary,
    portfolioPerformance,
    portfolioRisk,
    cacheInfo,
    transactionList,
    accountsDetailed,
    yearlyReturns,
    isLoading,
    error,
    
    // Ïï°ÏÖò
    uploadCsv,
    loadCacheInfo,
    clearCache,
    refreshData,
    clearError,
  };
};
